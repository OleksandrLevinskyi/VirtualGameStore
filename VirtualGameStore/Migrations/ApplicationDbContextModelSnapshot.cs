// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VirtualGameStore.Data;

#nullable disable

namespace VirtualGameStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryUser", b =>
                {
                    b.Property<int>("FavoriteCategoriesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoriteCategoriesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CategoryUser");
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.Property<int>("WishListId")
                        .HasColumnType("int");

                    b.Property<string>("WishListUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WishListId", "WishListUsersId");

                    b.HasIndex("WishListUsersId");

                    b.ToTable("GameUser");

                    b.HasData(
                        new
                        {
                            WishListId = 1,
                            WishListUsersId = "d5dafa9f-92a4-43dc-9652-02cf3860d621"
                        },
                        new
                        {
                            WishListId = 2,
                            WishListUsersId = "d5dafa9f-92a4-43dc-9652-02cf3860d621"
                        },
                        new
                        {
                            WishListId = 3,
                            WishListUsersId = "d5dafa9f-92a4-43dc-9652-02cf3860d621"
                        },
                        new
                        {
                            WishListId = 1,
                            WishListUsersId = "76742c46-0008-4749-af77-5d129b6d88b1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "afe877ff-cf81-4bff-9d50-66238d3a1b9e",
                            ConcurrencyStamp = "6010635a-cb51-4a21-bb0a-529ece3facbc",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "9a86cc44-771d-426d-b702-c4a4a93c348f",
                            ConcurrencyStamp = "00cce6e2-03f1-42cc-805f-91df7dae668e",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5abf56ec-8224-42b1-965d-a11bd8d818c7",
                            RoleId = "afe877ff-cf81-4bff-9d50-66238d3a1b9e"
                        },
                        new
                        {
                            UserId = "9a44a14a-47fb-4196-8a45-57fa557fb992",
                            RoleId = "9a86cc44-771d-426d-b702-c4a4a93c348f"
                        },
                        new
                        {
                            UserId = "d5dafa9f-92a4-43dc-9652-02cf3860d621",
                            RoleId = "9a86cc44-771d-426d-b702-c4a4a93c348f"
                        },
                        new
                        {
                            UserId = "76742c46-0008-4749-af77-5d129b6d88b1",
                            RoleId = "9a86cc44-771d-426d-b702-c4a4a93c348f"
                        },
                        new
                        {
                            UserId = "c1bf3565-0603-45bb-8994-a41612ff7da5",
                            RoleId = "9a86cc44-771d-426d-b702-c4a4a93c348f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlatformUser", b =>
                {
                    b.Property<int>("FavoritePlatformsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoritePlatformsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PlatformUser");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address1 = "104 Road Dr",
                            City = "Kitchener",
                            Country = "Canada",
                            PostalCode = "L1L 1L1",
                            Province = "Ontario"
                        },
                        new
                        {
                            Id = 2,
                            Address1 = "12 King Street",
                            City = "Waterloo",
                            Country = "Canada",
                            PostalCode = "B1B 1L1",
                            Province = "Ontario"
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Racing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = 5,
                            Name = "FPS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fighting"
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttendeeLimit")
                        .HasColumnType("int");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttendeeLimit = 5,
                            CreatorId = "5abf56ec-8224-42b1-965d-a11bd8d818c7",
                            DateTime = new DateTime(2022, 12, 2, 20, 6, 42, 184, DateTimeKind.Local).AddTicks(3143),
                            Description = "The Growth Hacking Hackathon is an event where designers, developers and marketers come together to create tools to help accelerate growth.",
                            Name = "Winter Hackathon 2022"
                        },
                        new
                        {
                            Id = 2,
                            AttendeeLimit = 16,
                            CreatorId = "5abf56ec-8224-42b1-965d-a11bd8d818c7",
                            DateTime = new DateTime(2023, 2, 11, 10, 6, 42, 184, DateTimeKind.Local).AddTicks(3182),
                            Description = "Come join us for some virtual pub trivia! Show up solo or with a team — and join the league to be eligible for big prizes!",
                            Name = "Holiday Trivia"
                        },
                        new
                        {
                            Id = 3,
                            AttendeeLimit = 1,
                            CreatorId = "5abf56ec-8224-42b1-965d-a11bd8d818c7",
                            DateTime = new DateTime(2022, 11, 29, 1, 6, 42, 184, DateTimeKind.Local).AddTicks(3184),
                            Description = "We will be playing an adventure provided in this fantastic series of separate stories set in the Forgotten Realms library itself, known as Candlekeep.",
                            Name = "Dungeons & Dragons"
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.Friendship", b =>
                {
                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FriendId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDigital")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fight your way through an exciting action-adventure game, inspired by classic dungeon crawlers and set in the Minecraft universe!",
                            IsDigital = false,
                            Name = "Minecraft Dungeons",
                            Price = 25.989999999999998,
                            Stock = 15
                        },
                        new
                        {
                            Id = 2,
                            Description = "An online and local party game of teamwork and betrayal for 4-15 players...in space!",
                            IsDigital = false,
                            Name = "Among Us",
                            Price = 5.6900000000000004,
                            Stock = 5
                        },
                        new
                        {
                            Id = 3,
                            Description = "Experience Sonic like never before!",
                            IsDigital = true,
                            Name = "Sonic Frontiers",
                            Price = 79.989999999999995,
                            Stock = 0
                        },
                        new
                        {
                            Id = 4,
                            Description = "Experience a galaxy of Worlds made entirely from LEGO bricks. EXPLORE gigantic landscapes, DISCOVER countless surprises, and CREATE anything you can imagine by building with LEGO bricks.",
                            IsDigital = true,
                            Name = "Lego Worlds",
                            Price = 29.989999999999998,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.GameCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GameCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            GameId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            GameId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            GameId = 2
                        },
                        new
                        {
                            CategoryId = 4,
                            GameId = 3
                        },
                        new
                        {
                            CategoryId = 5,
                            GameId = 3
                        },
                        new
                        {
                            CategoryId = 6,
                            GameId = 3
                        },
                        new
                        {
                            CategoryId = 3,
                            GameId = 4
                        },
                        new
                        {
                            CategoryId = 4,
                            GameId = 4
                        },
                        new
                        {
                            CategoryId = 6,
                            GameId = 4
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.GamePlatform", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatforms");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = 1,
                            PlatformId = 4
                        },
                        new
                        {
                            GameId = 2,
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = 3,
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = 3,
                            PlatformId = 4
                        },
                        new
                        {
                            GameId = 4,
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = 4,
                            PlatformId = 4
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddressId = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 19, 6, 42, 184, DateTimeKind.Local).AddTicks(3229),
                            IsProcessed = false,
                            ShippingAddressId = 2,
                            StatusId = 2,
                            UserId = "d5dafa9f-92a4-43dc-9652-02cf3860d621"
                        },
                        new
                        {
                            Id = 2,
                            BillingAddressId = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 18, 6, 42, 184, DateTimeKind.Local).AddTicks(3292),
                            IsProcessed = false,
                            ShippingAddressId = 2,
                            StatusId = 2,
                            UserId = "d5dafa9f-92a4-43dc-9652-02cf3860d621"
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            OrderId = 1,
                            Quantity = 2,
                            UnitPrice = 25.989999999999998
                        },
                        new
                        {
                            Id = 2,
                            GameId = 2,
                            OrderId = 1,
                            Quantity = 1,
                            UnitPrice = 5.6900000000000004
                        },
                        new
                        {
                            Id = 3,
                            GameId = 2,
                            OrderId = 2,
                            Quantity = 1,
                            UnitPrice = 5.6900000000000004
                        },
                        new
                        {
                            Id = 4,
                            GameId = 3,
                            OrderId = 2,
                            Quantity = 1,
                            UnitPrice = 79.989999999999995
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.PaymentOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HolderFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HolderLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardNumber = "4839203948547382",
                            ExpiryDate = "12/28",
                            HolderFirstName = "John",
                            HolderLastName = "Smith",
                            UserId = "9a44a14a-47fb-4196-8a45-57fa557fb992"
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Switch"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xbox"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PlayStation"
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeRegistered")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Registrations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeRegistered = new DateTime(2022, 11, 25, 20, 6, 42, 184, DateTimeKind.Local).AddTicks(3200),
                            EventId = 2,
                            UserId = "d5dafa9f-92a4-43dc-9652-02cf3860d621"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeRegistered = new DateTime(2022, 11, 26, 14, 6, 42, 184, DateTimeKind.Local).AddTicks(3204),
                            EventId = 2,
                            UserId = "76742c46-0008-4749-af77-5d129b6d88b1"
                        },
                        new
                        {
                            Id = 3,
                            DateTimeRegistered = new DateTime(2022, 11, 25, 19, 6, 42, 184, DateTimeKind.Local).AddTicks(3207),
                            EventId = 3,
                            UserId = "d5dafa9f-92a4-43dc-9652-02cf3860d621"
                        });
                });

            modelBuilder.Entity("VirtualGameStore.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GameId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("VirtualGameStore.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmailMarketingEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5abf56ec-8224-42b1-965d-a11bd8d818c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e2e9d4a-d8e2-4200-8e13-ef777407f2ca",
                            Email = "employee@vgs.com",
                            EmailConfirmed = true,
                            IsEmailMarketingEnabled = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@VGS.COM",
                            NormalizedUserName = "EMPLOYEE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiel0OKEa5+pKsFTlka1xHjptYHOzHiRtImi2E8QYR4dgXVvcAFZm1AA7wKbxO9ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "IOHH3QAG6CBJWWO4LDGAJTSSACV2KNDI",
                            TwoFactorEnabled = false,
                            UserName = "employee"
                        },
                        new
                        {
                            Id = "9a44a14a-47fb-4196-8a45-57fa557fb992",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d91ba7e7-903d-453c-8caf-3ad1907f96c6",
                            Email = "member@vgs.com",
                            EmailConfirmed = true,
                            IsEmailMarketingEnabled = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "MEMBER@VGS.COM",
                            NormalizedUserName = "MEMBER",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiel0OKEa5+pKsFTlka1xHjptYHOzHiRtImi2E8QYR4dgXVvcAFZm1AA7wKbxO9ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HNGZXUROYPX527M6RHWO6OPYCETU2WVK",
                            TwoFactorEnabled = false,
                            UserName = "member"
                        },
                        new
                        {
                            Id = "d5dafa9f-92a4-43dc-9652-02cf3860d621",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f4fa02d-33c6-48e6-b573-7218fa00c9a2",
                            Email = "msmith@vgs.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsEmailMarketingEnabled = false,
                            LastName = "Smith",
                            LockoutEnabled = true,
                            NormalizedEmail = "MSMITH@VGS.COM",
                            NormalizedUserName = "MSMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiel0OKEa5+pKsFTlka1xHjptYHOzHiRtImi2E8QYR4dgXVvcAFZm1AA7wKbxO9ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "WQ7TGOMDYEUVSMNVX2G35VKZ4MPGODG4",
                            TwoFactorEnabled = false,
                            UserName = "msmith"
                        },
                        new
                        {
                            Id = "76742c46-0008-4749-af77-5d129b6d88b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c6c0c5a-52ea-4b4c-89cc-8130611f1e54",
                            Email = "bjacobs@vgs.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            IsEmailMarketingEnabled = false,
                            LastName = "Jacobs",
                            LockoutEnabled = true,
                            NormalizedEmail = "BJACOBS@VGS.COM",
                            NormalizedUserName = "BJACOBS",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiel0OKEa5+pKsFTlka1xHjptYHOzHiRtImi2E8QYR4dgXVvcAFZm1AA7wKbxO9ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7XDDKAH2YGWTBDC7UVPT76DUXTLQES3E",
                            TwoFactorEnabled = false,
                            UserName = "bjacobs"
                        },
                        new
                        {
                            Id = "c1bf3565-0603-45bb-8994-a41612ff7da5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15ac61f3-86df-4243-be66-d8d65db46861",
                            Email = "rjohnson@vgs.com",
                            EmailConfirmed = true,
                            FirstName = "Rosa",
                            IsEmailMarketingEnabled = false,
                            LastName = "Johnson",
                            LockoutEnabled = true,
                            NormalizedEmail = "RJOHNSON@VGS.COM",
                            NormalizedUserName = "RJOHNSON",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiel0OKEa5+pKsFTlka1xHjptYHOzHiRtImi2E8QYR4dgXVvcAFZm1AA7wKbxO9ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "KKZPX3W76NI7XNOST4IYIHAH4UIF2QYP",
                            TwoFactorEnabled = false,
                            UserName = "rjohnson"
                        });
                });

            modelBuilder.Entity("CategoryUser", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("FavoriteCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("WishListUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VirtualGameStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VirtualGameStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VirtualGameStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformUser", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("FavoritePlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualGameStore.Models.CartItem", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Event", b =>
                {
                    b.HasOne("VirtualGameStore.Models.User", "Creator")
                        .WithMany("Events")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Friendship", b =>
                {
                    b.HasOne("VirtualGameStore.Models.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VirtualGameStore.Models.GameCategory", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("VirtualGameStore.Models.GamePlatform", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Order", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VirtualGameStore.Models.OrderItem", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VirtualGameStore.Models.PaymentOption", b =>
                {
                    b.HasOne("VirtualGameStore.Models.User", "User")
                        .WithMany("PaymentOptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Registration", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.User", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Review", b =>
                {
                    b.HasOne("VirtualGameStore.Models.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualGameStore.Models.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("VirtualGameStore.Models.User", b =>
                {
                    b.HasOne("VirtualGameStore.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("VirtualGameStore.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("VirtualGameStore.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.Navigation("BillingAddress");

                    b.Navigation("Gender");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Event", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Game", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("VirtualGameStore.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("VirtualGameStore.Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Events");

                    b.Navigation("Orders");

                    b.Navigation("PaymentOptions");

                    b.Navigation("Registrations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
